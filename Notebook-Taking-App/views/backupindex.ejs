<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ðŸ“‘Note taking Application</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>

<body>
    <div class="main w-full min-h-screen bg-zinc-900">

        <div class="form p-10 text-white">
            <!-- data add>post -->
            <form action="/create" method="post">
                <input class="block  w-full rounder-md  px-6 py-2 resize-none bg-zinc-800" type="text" name="title"  placeholder="Title goes hereðŸ“Œ" required> 
                <textarea class="block w-full rounder-md  mt-2  px-5 py-2 resize-none bg-zinc-800" name="content" id=""    placeholder="Write your task details here..." required></textarea>
                <input class="mt-2 bg-yellow-600 px-5 py-2" type="submit" value="Create Task">
            </form>
        </div>

        <div class="tasks flex gap-3 flex-wrap p-10">
           <%  if(files.length>0) { %>           
               <% files.forEach(function(val){ %>
                  <div class="task w-72 px-3 py-4 rounder-md bg-zinc-800 ">
                    <!-- <h1 class="text-white text-3xl tracking-tighter">Some task goes here.</h1> -->
                    <h1 class="text-white text-3xl tracking-tighter"> <%= val %></h1>
                    <!-- <a class="text-blue-500 inline-block mt-3" href="">Read More</a> -->
                  
                    <div class="flex w-full justify-between items-center mt-3" >
                       
                    <a class="text-yellow-400 inline-block" href="/file/<%= val %>">Read More</a>
                  
                  
                    <a class="text-blue-400" href="/edit/<%= encodeURIComponent(val) %>">Edit</a>
                    <!-- <a class="text-blue-400" href="/edit/<%= encodeURIComponent(val) %>">Edit</a>
                    <a class="text-red-400" href="/delete/<%= encodeURIComponent(val) %>" onclick="return confirm('Are you sure you want to delete this task?')">Delete</a> -->
                    </div>
                  
                    </p>
                   </div>
    
                   <% }) %>
                <% } else { %>
                     <h3 class=" p-10 text-zinc-700">No tasksðŸ”–</h3>
                 <% } %>
            

            <!-- <div class="task w-72 px-3 py-4 rounder-md bg-zinc-800 ">
                <h1 class="text-white text-3xl tracking-tighter">Some task goes here.</h1>
                <a class="text-blue-500 inline-block mt-3" href="">Read More</a>
                </p>
            </div>


            <div class="task w-72 px-3 py-4 rounder-md bg-zinc-800 ">
                <h1 class="text-white text-3xl tracking-tighter">Some task goes here.</h1>
                <a class="text-blue-500 inline-block mt-3" href="">Read More</a>
                </p>
            </div>


            <div class="task w-72 px-3 py-4 rounder-md bg-zinc-800 ">
                <h1 class="text-white text-3xl tracking-tighter">Some task goes here.</h1>
                <a class="text-blue-500 inline-block mt-3" href="">Read More</a>
                </p>
            </div> -->

        
        </div>
        <!-- <h3 class=" p-10 text-zinc-700">No tasksðŸ”–</h3> -->
    </div>
</body>

</html>











<!-- ..................
 -->
 const express = require ('express');

const app = express();
const path =require ('path');
const fs =require ('fs')

app.set("view engine","ejs");
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// we can connect ejs  /also we find static files ,like css ,js in
app.use(express.static(path.join(__dirname,"public")))


//1 -display list of Files
app.get('/',(req,res)=>{
    // asli logic 
    fs.readdir(`./files` ,function(err,files){ //files folder ko read krega
        if (err) {
            return res.status(500).send('Unable to read files');
        }
        res.render("index", { files: files });
  })
}) 

//3
app.get('/file/:filename' ,(req,res)=>{
    fs.readFile(`./files/${req.params.filename}`,"utf-8" ,function(err,filedata) {

        // console.log(filedata)
        
        if(err) {
            return res.status(500).send('Unable to read File');
        }
     res.render('show',{filename: req.params.filename, filedata:filedata});
    })
})




//2
app.post('/create' ,(req,res)=>{
    fs.writeFile(`./files/${req.body.title}.txt`,req.body.content,(err)=>{
        res.redirect('/')
    })
   
})

// 4 
// app.get('edit/:filename' ,(req,res)=>{
//     res.render("edit")

// })
// 4 - Display edit form
// app.get('/edit/:filename', (req, res) => {
//     const filename = decodeURIComponent(req.params.filename);
//     fs.readFile(`./files/${filename}`, "utf-8", (err, filedata) => {
//         if (err) {
//             return res.status(500).send('Unable to read file');
//         }
//         res.render('edit', { filename: filename, filedata: filedata });
//     });
// });





// // Delete a file
// app.get('/delete/:filename', (req, res) => {
//     const filename = decodeURIComponent(req.params.filename);
//     fs.unlink(`./files/${filename}`, (err) => {
//         if (err) {
//             return res.status(500).send('Unable to delete file');
//         }
//         res.redirect('/');
//     });
// });


// 4 - Display edit form
app.get('/edit/:filename', (req, res) => {
    const filename = decodeURIComponent(req.params.filename);
    fs.readFile(`./files/${filename}`, "utf-8", (err, filedata) => {
        if (err) {
            return res.status(500).send('Unable to read file');
        }
        fs.readdir(`./files`, (err, files) => {
            if (err) {
                return res.status(500).send('Unable to read files');
            }
            res.render("index", { files: files, editMode: true, editFile: { filename: filename, filedata: filedata } });
        });
    });
});

// 5 - Update file content
app.post('/update/:filename', (req, res) => {
    const oldFilename = decodeURIComponent(req.params.filename);
    const newFilename = `${req.body.title}.txt`;
    fs.rename(`./files/${oldFilename}`, `./files/${newFilename}`, (err) => {
        if (err) {
            return res.status(500).send('Unable to rename file');
        }
        fs.writeFile(`./files/${newFilename}`, req.body.content, (err) => {
            if (err) {
                return res.status(500).send('Unable to update file');
            }
            res.redirect('/');
        });
    });
});

// 6 - Delete a file
app.get('/delete/:filename', (req, res) => {
    const filename = decodeURIComponent(req.params.filename);
    fs.unlink(`./files/${filename}`, (err) => {
        if (err) {
            return res.status(500).send('Unable to delete file');
        }
        res.redirect('/');
    });
});

const PORT=3000;

app.listen(PORT,()=>{
    console.log(`Server is Running on ${PORT}`)
})